tablea <- data.frame()
tablea
edit(tablea)
tablea
tablea
clear
cls
tablea <- edit(tablea)
tablea
dim(tablea)
nrows(tablea)
nrow(tablea)
ncol(tablea)
class(tablea.var1)
cols(tablea)
colnames(tablea)
colnames(tablea) <- ['col1',col2]
colnames(tablea) <- c('col1',col2)
colnames(tablea) <- c('col1','col2')
colnames(tablea)
tablea
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
devtools
clear
cls
c
install.packages('IRkernel')
library("IRkernel", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("IRkernel")
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages('twitteR')
library(twitteR)
library(twitteR)
install.packages("twitteR")
library(devtools)
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtolls)
library(devtools)
library(devtools)
library(devtools)
install.packages(c("devtools", "rjson", "bit64", "httr"))
install.packages(c("devtools", "rjson", "bit64", "httr"),dependencies = TRUE)
library(devtools)
install.packages("rjson")
install.packages("bit64")
install.packages("httr")
install.packages("devtools")
library(devtools)
cleaer
installed.packages(.Library)
library(rpart)
clear
hist(c(1,2,3,4))
library("bit64", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:bit", unload=TRUE)
install.packages(c("devtools", "rjson", "bit64", "httr"))
library(devtools)
library(devtools)
data()
attach(mpg)
mpg
data(mpg)
library(maps)
import.packages("maps")
install.packages("maps","ggmap","maptools")
install.packages("maps")
library(maps)
install.packages("ggmap")
install.packages("maptools")
mpg
data()
hist(c(-2,1,-3,4,-1,2,1,-5,4))
plot(seq(9),c(-2,1,-3,4,-1,2,1,-5,4))
library(tidyverse)
install.packages(tidyverse,TRUE)
install.packages('tidyverse'',TRUE)
install.packages('tidyverse'',TRUE)
install.packages('tidyverse'',TRUE)
install.packages('tidyverse'',TRUE)
clear
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse", dependencies = FALSE)
install.packages("rvest")
install.packages("xml2")
install.packages("tidyverse", dependencies = T)
library(tidyverse)
install.packages("ggmap")
#https://stackoverflow.com/questions/32090073/geom-bar-geom-line-with-different-y-axis-scale
#http://www.sthda.com/english/wiki/ggplot2-line-types-how-to-change-line-types-of-a-graph-in-r-software
#https://html-color-codes.info/colors-from-image/#
#https://stackoverflow.com/questions/46039176/ggplot2-adding-secondary-y-axis-with-different-breaks-and-labels
#https://stackoverflow.com/questions/14771546/remove-legend-title-in-ggplot
#http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
#https://ggplot2.tidyverse.org/reference/element.html
#library(lemon)
chart1 <- ggplot() +
geom_bar(data = bar_data,mapping = aes(fill=variable, y=value, x=factor(Week)), position="stack", stat="identity", color = "black") +
theme(axis.text.x = element_text(angle=65)) +
scale_fill_manual(values = c("#FFFF33","#008033")) +
#ylim(c(0,14000)) +
geom_line(data = line_data,mapping = aes(color = variable, y=value*400, x=factor(Week), group = variable,linetype = variable, size = variable)) +
scale_y_continuous(sec.axis = sec_axis(~.*(1/400), name = "Percent positive", breaks = seq(0,35,5)),breaks = seq(0,14000, by = 2000),limits = c(0,14000)) +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
#theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_colour_manual(values = c("black","#FFAA33", "#66D533")) +
scale_size_manual(values = c(0.9,0.9,0.9)) +
#ylim(0,14000) +
xlab("Week") +
ylab(c("Number of positive specimens","Percent Positive")) +
theme(axis.title = element_text(face = "bold"),
axis.title.y.right = element_text(angle = 90, hjust = 0.5,face = "bold"),
axis.text = element_text(face = "bold"),
axis.line.x.top = element_line(size = 1),
axis.line.y = element_line(size = 1),
axis.ticks.x = element_blank(),
legend.title = element_blank() ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(0.5,"cm"),
legend.text = element_text(face = "bold",margin = margin(1.5,1.5,1.5,1.5,"mm")), #to add space between legend symbol and name
legend.key = element_rect(fill = "white"), #to make legend symbol background white
panel.background = element_rect(fill = "white", colour = NA))   #to make the chart background white
#https://stackoverflow.com/questions/32090073/geom-bar-geom-line-with-different-y-axis-scale
#http://www.sthda.com/english/wiki/ggplot2-line-types-how-to-change-line-types-of-a-graph-in-r-software
#https://html-color-codes.info/colors-from-image/#
#https://stackoverflow.com/questions/46039176/ggplot2-adding-secondary-y-axis-with-different-breaks-and-labels
#https://stackoverflow.com/questions/14771546/remove-legend-title-in-ggplot
#http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
#https://ggplot2.tidyverse.org/reference/element.html
#library(lemon)
chart1 <- ggplot() +
geom_bar(data = bar_data,mapping = aes(fill=variable, y=value, x=factor(Week)), position="stack", stat="identity", color = "black") +
theme(axis.text.x = element_text(angle=65)) +
scale_fill_manual(values = c("#FFFF33","#008033")) +
#ylim(c(0,14000)) +
geom_line(data = line_data,mapping = aes(color = variable, y=value*400, x=factor(Week), group = variable,linetype = variable, size = variable)) +
scale_y_continuous(sec.axis = sec_axis(~.*(1/400), name = "Percent positive", breaks = seq(0,35,5)),breaks = seq(0,14000, by = 2000),limits = c(0,14000)) +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
#theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_colour_manual(values = c("black","#FFAA33", "#66D533")) +
scale_size_manual(values = c(0.9,0.9,0.9)) +
#ylim(0,14000) +
xlab("Week") +
ylab(c("Number of positive specimens","Percent Positive")) +
theme(axis.title = element_text(face = "bold"),
axis.title.y.right = element_text(angle = 90, hjust = 0.5,face = "bold"),
axis.text = element_text(face = "bold"),
axis.line.x.top = element_line(size = 1),
axis.line.y = element_line(size = 1),
axis.ticks.x = element_blank(),
legend.title = element_blank() ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(0.5,"cm"),
legend.text = element_text(face = "bold",margin = margin(1.5,1.5,1.5,1.5,"mm")), #to add space between legend symbol and name
legend.key = element_rect(fill = "white"), #to make legend symbol background white
panel.background = element_rect(fill = "white", colour = NA))   #to make the chart background white
#https://stackoverflow.com/questions/32090073/geom-bar-geom-line-with-different-y-axis-scale
#http://www.sthda.com/english/wiki/ggplot2-line-types-how-to-change-line-types-of-a-graph-in-r-software
#https://html-color-codes.info/colors-from-image/#
#https://stackoverflow.com/questions/46039176/ggplot2-adding-secondary-y-axis-with-different-breaks-and-labels
#https://stackoverflow.com/questions/14771546/remove-legend-title-in-ggplot
#http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
#https://ggplot2.tidyverse.org/reference/element.html
#library(lemon)
chart1 <- ggplot() +
geom_bar(data = bar_data,mapping = aes(fill=variable, y=value, x=factor(Week)), position="stack", stat="identity", color = "black") +
theme(axis.text.x = element_text(angle=65)) +
scale_fill_manual(values = c("#FFFF33","#008033")) +
#ylim(c(0,14000)) +
geom_line(data = line_data,mapping = aes(color = variable, y=value*400, x=factor(Week), group = variable,linetype = variable, size = variable)) +
scale_y_continuous(sec.axis = sec_axis(~.*(1/400), name = "Percent positive", breaks = seq(0,35,5)),breaks = seq(0,14000, by = 2000),limits = c(0,14000)) +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
#theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_colour_manual(values = c("black","#FFAA33", "#66D533")) +
scale_size_manual(values = c(0.9,0.9,0.9)) +
#ylim(0,14000) +
xlab("Week") +
ylab(c("Number of positive specimens","Percent Positive")) +
theme(axis.title = element_text(face = "bold"),
axis.title.y.right = element_text(angle = 90, hjust = 0.5,face = "bold"),
axis.text = element_text(face = "bold"),
axis.line.x.top = element_line(size = 1),
axis.line.y = element_line(size = 1),
axis.ticks.x = element_blank(),
legend.title = element_blank() ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(0.5,"cm"),
legend.text = element_text(face = "bold",margin = margin(1.5,1.5,1.5,1.5,"mm")), #to add space between legend symbol and name
legend.key = element_rect(fill = "white"), #to make legend symbol background white
panel.background = element_rect(fill = "white", colour = NA))   #to make the chart background white
#https://stackoverflow.com/questions/32090073/geom-bar-geom-line-with-different-y-axis-scale
#http://www.sthda.com/english/wiki/ggplot2-line-types-how-to-change-line-types-of-a-graph-in-r-software
#https://html-color-codes.info/colors-from-image/#
#https://stackoverflow.com/questions/46039176/ggplot2-adding-secondary-y-axis-with-different-breaks-and-labels
#https://stackoverflow.com/questions/14771546/remove-legend-title-in-ggplot
#http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements
#https://ggplot2.tidyverse.org/reference/element.html
#library(lemon)
chart1 <- ggplot() +
geom_bar(data = bar_data,mapping = aes(fill=variable, y=value, x=factor(Week)), position="stack", stat="identity", color = "black") +
theme(axis.text.x = element_text(angle=65)) +
scale_fill_manual(values = c("#FFFF33","#008033")) +
#ylim(c(0,14000)) +
geom_line(data = line_data,mapping = aes(color = variable, y=value*400, x=factor(Week), group = variable,linetype = variable, size = variable)) +
scale_y_continuous(sec.axis = sec_axis(~.*(1/400), name = "Percent positive", breaks = seq(0,35,5)),breaks = seq(0,14000, by = 2000),limits = c(0,14000)) +
scale_linetype_manual(values=c("solid", "dashed", "dotted")) +
#theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
scale_colour_manual(values = c("black","#FFAA33", "#66D533")) +
scale_size_manual(values = c(0.9,0.9,0.9)) +
#ylim(0,14000) +
xlab("Week") +
ylab(c("Number of positive specimens","Percent Positive")) +
theme(axis.title = element_text(face = "bold"),
axis.title.y.right = element_text(angle = 90, hjust = 0.5,face = "bold"),
axis.text = element_text(face = "bold"),
axis.line.x.top = element_line(size = 1),
axis.line.y = element_line(size = 1),
axis.ticks.x = element_blank(),
legend.title = element_blank() ,
legend.key.width = unit(1,"cm"),
legend.key.height = unit(0.5,"cm"),
legend.text = element_text(face = "bold",margin = margin(1.5,1.5,1.5,1.5,"mm")), #to add space between legend symbol and name
legend.key = element_rect(fill = "white"), #to make legend symbol background white
panel.background = element_rect(fill = "white", colour = NA))   #to make the chart background white
library(shiny)
library(plyr)
library(plotly)
library(ggmap)
library(dygraphs)
read <- read.csv("master_state_count.csv", header=F)
state_code <- state.abb[match(read$V1,state.name)]
count_state <- count(state_code)
l <- list(color = toRGB("white"), width = 2)
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
twitterAll <- plot_geo(count_state, locationmode = 'USA-states') %>%
add_trace(
z = ~count_state$freq, locations = ~count_state$x,
color = ~count_state$freq, colors=c("dark green","green", "yellow", "orange", "red")
) %>%
colorbar(title = "Frequency of Tweets") %>%
layout(
title = '2018-19 Frequency of Tweets (All key words) on Flu Categorized by states',
geo = g
)
HeatMap <- read.csv("StateDataforMap_2018-19week8.csv", header=T) # input file : 'FluHeatMap_USA.csv'
HeatMap$ACTIVITY.LEVEL <- as.integer(gsub('[a-zA-Z]', '', HeatMap$ACTIVITY.LEVEL))
HeatMap$STATENAME <- state.abb[match(HeatMap$STATENAME,state.name)]
cdc <- plot_geo(HeatMap, locationmode = 'USA-states') %>%
add_trace(
z = ~HeatMap$ACTIVITY.LEVEL, locations = ~HeatMap$STATENAME,
color = ~HeatMap$ACTIVITY.LEVEL, colors=c("dark green","green", "yellow", "orange", "red") ) %>%
colorbar(title = "ILI Activity Level") %>%
layout(
title = '2018-19 Influenza Season Week 1 March 08, 2019',
geo = list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
)
read <- read.csv("master_state_count_fewkey.csv", header=F)
state_code <- state.abb[match(read$V1,state.name)]
count_state <- count(state_code)
twitterFew <- plot_geo(count_state, locationmode = 'USA-states') %>%
add_trace(
z = ~count_state$freq, locations = ~count_state$x,
color = ~count_state$freq, colors=c("dark green","green", "light yellow", "orange", "red")
) %>%
colorbar(title = "Frequency of Tweets") %>%
layout(
title = '2018-19 Frequency of Tweets (Few key words) on Flu Categorized by states',
geo = g
)
ui <- fluidPage(
headerPanel("Heat map comparison"),
sidebarPanel(
selectInput("map", "Maps:",
c("CDC vs Twitter All" = "cta",
"Twitter All vs Twitter Few" = "tatf",
"CDC vs Twitter Few" = "ctf"))),
mainPanel(plotlyOutput("graph1"), plotlyOutput("graph2"))
)
server <- function(input, output) {
output$graph1 <- renderPlotly({
if (input$map=='tatf') {
twitterAll;
} else {
cdc;
}
})
output$graph2 <- renderPlotly({
if (input$map=='cta') {
twitterAll;
} else {
twitterFew;
}
})
}
shinyApp(ui, server)
runApp('git_workspace/DIC/PA1/part3/shiny.R')
runApp('git_workspace/DIC/PA1/part3/shiny.R')
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99), levels=yn)
t.a <- cptable(~tub | asia, values=c(5,95,1,99), levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung | smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc | smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either | lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray | either, values=c(98,2,5,95), levels=yn)
d.be<-cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9),levels=yn)
> cpt.list <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
> cpt.list$asia
cpt.list$asia
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99), levels=yn)
t.a <- cptable(~tub | asia, values=c(5,95,1,99), levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung | smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc | smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either | lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray | either, values=c(98,2,5,95), levels=yn)
d.be<-cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9),levels=yn)
cpt.list <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
cpt.list$asia
install.packages("gRain")
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99), levels=yn)
t.a <- cptable(~tub | asia, values=c(5,95,1,99), levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung | smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc | smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either | lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray | either, values=c(98,2,5,95), levels=yn)
d.be<-cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9),levels=yn)
cpt.list <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
cpt.list$asia
install.packages("gRain", dependencies = FALSE)
install.packages("gRbase")
install.packages("graph")
install.packages("gRain", dependencies=TRUE)
install.packages("gRbase", dependencies=TRUE);
install.packages("gRain", dependencies=TRUE);
install.packages("gRim", dependencies=TRUE)
install.packages("gRbase", dependencies=TRUE);
source("http://bioconductor.org/biocLite.R");
biocLite(c("graph", "RBGL", "Rgraphviz"))
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99), levels=yn)
t.a <- cptable(~tub | asia, values=c(5,95,1,99), levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung | smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc | smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either | lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray | either, values=c(98,2,5,95), levels=yn)
d.be<-cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9),levels=yn)
cpt.list <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
cpt.list$asia
# #http://people.math.aau.dk/~sorenh/software/gR/
# source("http://bioconductor.org/biocLite.R");
# biocLite(c("graph", "RBGL", "Rgraphviz"))
library(gRain)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99), levels=yn)
t.a <- cptable(~tub | asia, values=c(5,95,1,99), levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung | smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc | smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either | lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray | either, values=c(98,2,5,95), levels=yn)
d.be<-cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9),levels=yn)
cpt.list <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
cpt.list$asia
# #http://people.math.aau.dk/~sorenh/software/gR/
# source("http://bioconductor.org/biocLite.R");
# biocLite(c("graph", "RBGL", "Rgraphviz"))
setwd("~/git_workspace/DIC/PA2")
rm(list = ls())
GOT <- read.csv("GOT.csv",header = TRUE)
class(GOT)
